"""
Django settings for bcapital project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta
import environ
import pycron


root = environ.Path(start=__file__) - 3
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
env = environ.Env()
environ.Env.read_env()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('APP_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("APP_DEBUG", default=True)

ALLOWED_HOSTS = ['*']

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'corsheaders',
    'allauth',
    'knox',
    'barter_auth',
    'transactions',
    'sales_funnel',
    'global_settings',
    'kyc_verifications',
    'django_extensions',
    'drf_spectacular',
    'django_filters',
    'storages',  # django-storages to upload imagefields to AWS S3 Bucket
    'email_app',
    'barter_backend',
    'pycron'
]

MIDDLEWARE = [
    # https://pypi.org/project/django-cors-headers/
    # Cors middleware should be placed before other middlewares
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware',
]

X_FRAME_OPTIONS = "SAMEORIGIN"

ROOT_URLCONF = 'bcapital.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bcapital.wsgi.application'

CSRF_TRUSTED_ORIGINS = [
    'https://*.bartercapital-dashboard.com',
    'https://*.bartercapital.net',
    'https://*.127.0.0.1',
    'https://s60w77gmz6.execute-api.us-east-1.amazonaws.com',
    'https://ajq1nlprml.execute-api.us-east-1.amazonaws.com'
    'https://barter-capital-sales-funnel.vercel.app/',
    'https://www.barter-capital-sales-funnel.vercel.app/',
    'https://bartercapital.net',
    'https://www.bartercapital.net',
    'https://dashboard-ui-six-staging.vercel.app',
    'https://barter-capital-dashboard-git-develop-admin-bartercapita.vercel.app',
    'https://*.sumsub.com/*',
    'https://*.sumsub.com/']
# REST Framework

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'knox.auth.TokenAuthentication'
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400'
}

STATIC_URL = "/static/"

STATICFILES_DIRS = (root("static"),)

STATIC_ROOT = os.path.join(BASE_DIR, "assets-root", "static")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "assets-root", "media")

AWS_S3_SIGNATURE_VERSION = "s3v4"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom Auth Settings
AUTH_USER_MODEL = 'barter_auth.BarterUser'

# Django All Auth Settings
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/?verification=1'
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/?verification=1'

SITE_ID = 1
EMAIL_BACKEND = 'django_ses.SESBackend'

AWS_ACCESS_KEY_ID = os.environ.get('AWS_SES_ACCESS_KEY_ID')
AWS_S3_ACCESS_KEY_ID = AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SES_SECRET_ACCESS_KEY')
AWS_S3_SECRET_ACCESS_KEY = AWS_SECRET_ACCESS_KEY
AWS_S3_REGION_NAME = 'us-east-1'  # e.g. us-east-2
AWS_QUERYSTRING_AUTH = False
CORS_ORIGIN_ALLOW_ALL = True

SENDER_EMAIL = os.environ.get('SENDER_EMAIL')
FRONTEND_URL = os.environ.get('FRONTEND_URL_DEV') if DEBUG else os.environ.get('FRONTEND_URL_PROD')
SUPPORT_EMAIL = os.environ.get('SUPPORT_EMAIL')

ROLLBAR = {
    'access_token': os.environ.get('ROLLBAR_ACCESS_TOKEN'),
    'environment': 'development' if DEBUG else 'production',
    'code_version': '1.0',
    'root': BASE_DIR,
}

# django rest knox settings
REST_KNOX = {
    'TOKEN_TTL': timedelta(hours=10), #time to live (without refresh)
    'TOKEN_LIMIT_PER_USER': None,
    'AUTO_REFRESH': True,
    'MIN_REFRESH_INTERVAL': 60 #number of seconds
}

# drf_spectacular OpenAPI documentation config
SPECTACULAR_SETTINGS = {
    'TITLE': 'Barter Capital API',
    'DESCRIPTION': 'Dashboard API',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
    'SCHEMA_PATH_PREFIX': '/api',
}

# Admin style customization using django-jazzmin package
JAZZMIN_SETTINGS = {
    # Title on browser tab
    'site_title': 'Barter Capital',

    # Title on login screen
    'site_header': 'Barter Capital',

    # Title on brand
    'site_brand': 'Barter Capital',

    # Welcome text on login screen
    'welcome_sign': 'Bienvenido',

    # Copyright
    'copyright': 'Barter Capital Group',

    # Create new objects in a modal window instead of a popup
    "related_modal_active": True,

    'user_avatar': 'profile_image',

    'topmenu_links': [
        {'name': 'Dashboard', 'url': 'https://bartercapital-dashboard.com'},
        {
            'name': 'Plataforma Webstreaming',
            'url': 'http://webtv.iptvsmarters.com/index.php?adduser'
        },
    ],

    # Icons used on models in the sidebar
    'icons': {
        'barter_auth.barteruser': 'fas fa-user',
        'barter_auth.unilevelnetwork': 'fas fa-users',
        'barter_auth.userwallet': 'fas fa-wallet',
        'barter_auth.barterplancredentials': 'fas fa-key',
        'sales_funnel.salesfunnelowner': 'fas fa-filter',
        'sales_funnel.funnelstep': 'fas fa-shoe-prints',
        'sales_funnel.newslettersubscription': 'fas fa-newspaper',
        'global_settings': 'fas fa-cogs',
        'global_settings.withdrawaltype': 'fas fa-hand-holding-usd',
        'global_settings.kitplan': 'fas fa-book',
        'global_settings.businesswallet': 'fas fa-wallet',
        'global_settings.exchangechoices': 'fas fa-cubes',
        'global_settings.blockchainchoices': 'fab fa-ethereum',
        'global_settings.leadershippooltype': 'fas fa-poll'
    },

    'order_with_respect_to': [
        # App ordering
        'barter_auth',
        'transactions',
        'sales_funnel',
        'global_settings',
        'kyc_verifications',

        # Internal App Ordering
        'barter_auth.barteruser',
        'barter_auth.unilevelnetwork',
        'barter_auth.userwallet',
        'barter_auth.barterplancredentials',

        'global_settings.businesswallet',
        'global_settings.leadershippooltype',
        'global_settings.kitplan',
        'global_settings.withdrawaltype'
    ],

    "changeform_format_overrides": {"barter_auth.barteruser": "vertical_tabs"}
}

# region CUSTOM .ENV VARIABLE ASSIGNMENTS

if DEBUG is True:
    SUMSUB_APP_TOKEN = os.environ.get("SUMSUB_APP_TOKEN")
    SUMSUB_SECRET_KEY = os.environ.get("SUMSUB_SECRET_KEY")
else:
    SUMSUB_APP_TOKEN = os.environ.get("SUMSUB_PROD_APP_TOKEN")
    SUMSUB_SECRET_KEY = os.environ.get("SUMSUB_PROD_SECRET_KEY")
# endregion

#DATABASECONECCTION
DB_PASSWORD_DEV = "zaxscd"
DB_NAME_DEV = "barter_local"
DB_HOST_DEV = "localhost"
DB_USER_DEV = "postgres"
DB_PORT = 5432